/*
1, General Class for Integration / both complex and real
2, Eigen interoperation
*/

// #include <Eigen/Core>
#pragma once

// #include <Eigen/Dense>
// #include <boost/multiprecision/eigen.hpp>
#include <iostream>
#include <type_traits>
#include "Cube.hpp"
#include "GM_category.hpp"
#include <array>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <boost/multiprecision/float128.hpp>


namespace GM {

    template <class Real, unsigned tag>
    class GM3D_detail;

    template <class Real>
    class GM3D_detail <Real, 0> {
        public:
            static std::array<Real, 33> const & abscissa_x()
            {
                static constexpr std::array<Real, 33> data = { \
                    0.0f, \
                    0.35856858280031809199064515390793749545406372969943f, \
                    -0.35856858280031809199064515390793749545406372969943f, \
                    0.0f,\
                    0.0f,\
                    0.0f,\
                    0.0f,\
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f,\
                    0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f,\
                    -0.68824720161168529772162873429362352512689535661565f
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_y()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.35856858280031809199064515390793749545406372969943f, \
                    -0.35856858280031809199064515390793749545406372969943f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.0f, \
                    0.0f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f,\
                    -0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f,\
                    -0.68824720161168529772162873429362352512689535661565f
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_z()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.35856858280031809199064515390793749545406372969943f, \
                    -0.35856858280031809199064515390793749545406372969943f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.0f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.94868329805051379959966806332981556011586654179757f, \
                    -0.94868329805051379959966806332981556011586654179757f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f, \
                    0.68824720161168529772162873429362352512689535661565f, \
                    -0.68824720161168529772162873429362352512689535661565f
                };
                return data;
            }

            static std::array<Real, 5> const & weights_integral()
            {
                static constexpr std::array<Real, 5> data = {\
                    -0.55560636081898084641568866534572981760910430320581f, \
                    0.14936747447035512879134278311233043743331809175431f, \
                    0.031499263323680333282528069908042473200223543159071f, \
                    0.010161052685058172026621958034852410709749530051313f, \
                    0.043559162729258749102712044987129047513008117675781f
                };
                return data;
            }

            static std::array<Real, 4> const & weights_error()
            {
                static constexpr std::array<Real, 4> data = {\
                    -2.2921810699588477366255144032921810699588477366255f, \
                    0.50411522633744855967078189300411522633744855967078f, \
                    -0.024005486968449931412894375857338820301783264746228f, \
                    0.034293552812071330589849108367626886145404663923182f
                };
                return data;
            }
    };


    template <class Real>
    class GM3D_detail <Real, 1> {
        // 1 for double
        public:
            static std::array<Real, 33> const & abscissa_x()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0, \
                    0.35856858280031809199064515390793749545406372969943, \
                    -0.35856858280031809199064515390793749545406372969943, \
                    0.0,\
                    0.0,\
                    0.0,\
                    0.0,\
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565,\
                    0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565,\
                    -0.68824720161168529772162873429362352512689535661565
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_y()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0, \
                    0.0, \
                    0.0, \
                    0.35856858280031809199064515390793749545406372969943, \
                    -0.35856858280031809199064515390793749545406372969943, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.0, \
                    0.0, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565,\
                    -0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565,\
                    -0.68824720161168529772162873429362352512689535661565
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_z()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.35856858280031809199064515390793749545406372969943, \
                    -0.35856858280031809199064515390793749545406372969943, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.0, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.94868329805051379959966806332981556011586654179757, \
                    -0.94868329805051379959966806332981556011586654179757, \
                    0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565, \
                    0.68824720161168529772162873429362352512689535661565, \
                    -0.68824720161168529772162873429362352512689535661565
                };
                return data;
            }

            static std::array<Real, 5> const & weights_integral()
            {
                static constexpr std::array<Real, 5> data = {\
                    -0.55560636081898084641568866534572981760910430320581, \
                    0.14936747447035512879134278311233043743331809175431, \
                    0.031499263323680333282528069908042473200223543159071, \
                    0.010161052685058172026621958034852410709749530051313, \
                    0.043559162729258749102712044987129047513008117675781
                };
                return data;
            }

            static std::array<Real, 4> const & weights_error()
            {
                static constexpr std::array<Real, 4> data = {\
                    -2.2921810699588477366255144032921810699588477366255, \
                    0.50411522633744855967078189300411522633744855967078, \
                    -0.024005486968449931412894375857338820301783264746228, \
                    0.034293552812071330589849108367626886145404663923182
                };
                return data;
            }
    };

    template <class Real>
    class GM3D_detail <Real, 2> {
        // 2 for long double
        public:
            static std::array<Real, 33> const & abscissa_x()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0L, \
                    0.35856858280031809199064515390793749545406372969943L, \
                    -0.35856858280031809199064515390793749545406372969943L, \
                    0.0L,\
                    0.0L,\
                    0.0L,\
                    0.0L,\
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L,\
                    0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L,\
                    -0.68824720161168529772162873429362352512689535661565L
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_y()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.35856858280031809199064515390793749545406372969943L, \
                    -0.35856858280031809199064515390793749545406372969943L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.0L, \
                    0.0L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L,\
                    -0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L,\
                    -0.68824720161168529772162873429362352512689535661565L
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_z()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.35856858280031809199064515390793749545406372969943L, \
                    -0.35856858280031809199064515390793749545406372969943L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.0L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.94868329805051379959966806332981556011586654179757L, \
                    -0.94868329805051379959966806332981556011586654179757L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L, \
                    0.68824720161168529772162873429362352512689535661565L, \
                    -0.68824720161168529772162873429362352512689535661565L
                };
                return data;
            }

            static std::array<Real, 5> const & weights_integral()
            {
                static constexpr std::array<Real, 5> data = {\
                    -0.55560636081898084641568866534572981760910430320581L, \
                    0.14936747447035512879134278311233043743331809175431L, \
                    0.031499263323680333282528069908042473200223543159071L, \
                    0.010161052685058172026621958034852410709749530051313L, \
                    0.043559162729258749102712044987129047513008117675781L
                };
                return data;
            }

            static std::array<Real, 4> const & weights_error()
            {
                static constexpr std::array<Real, 4> data = {\
                    -2.2921810699588477366255144032921810699588477366255L, \
                    0.50411522633744855967078189300411522633744855967078L, \
                    -0.024005486968449931412894375857338820301783264746228L, \
                    0.034293552812071330589849108367626886145404663923182L
                };
                return data;
            }
    };

    

#ifdef BOOST_HAS_FLOAT128
    template <class Real>
    class GM3D_detail <Real, 3> {
        // 3 for boost 128
        public:
            static std::array<Real, 33> const & abscissa_x()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0Q, \
                    0.35856858280031809199064515390793749545406372969943Q, \
                    -0.35856858280031809199064515390793749545406372969943Q, \
                    0.0Q,\
                    0.0Q,\
                    0.0Q,\
                    0.0Q,\
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q,\
                    0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q,\
                    -0.68824720161168529772162873429362352512689535661565Q
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_y()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.35856858280031809199064515390793749545406372969943Q, \
                    -0.35856858280031809199064515390793749545406372969943Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.0Q, \
                    0.0Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q,\
                    -0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q,\
                    -0.68824720161168529772162873429362352512689535661565Q
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_z()
            {
                static constexpr std::array<Real, 33> data = {\
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.35856858280031809199064515390793749545406372969943Q, \
                    -0.35856858280031809199064515390793749545406372969943Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.0Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.94868329805051379959966806332981556011586654179757Q, \
                    -0.94868329805051379959966806332981556011586654179757Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q, \
                    0.68824720161168529772162873429362352512689535661565Q, \
                    -0.68824720161168529772162873429362352512689535661565Q
                };
                return data;
            }


            static std::array<Real, 5> const & weights_integral()
            {
                static constexpr std::array<Real, 5> data = {\
                    -0.55560636081898084641568866534572981760910430320581Q, \
                    0.14936747447035512879134278311233043743331809175431Q, \
                    0.031499263323680333282528069908042473200223543159071Q, \
                    0.010161052685058172026621958034852410709749530051313Q, \
                    0.043559162729258749102712044987129047513008117675781Q
                };
                return data;
            }

            static std::array<Real, 4> const & weights_error()
            {
                static constexpr std::array<Real, 4> data = {\
                    -2.2921810699588477366255144032921810699588477366255Q, \
                    0.50411522633744855967078189300411522633744855967078Q, \
                    -0.024005486968449931412894375857338820301783264746228Q, \
                    0.034293552812071330589849108367626886145404663923182Q
                };
                return data;
            }
    };
#endif

typedef boost::multiprecision::float128 f128;


template <class Real>
    class GM3D_detail <Real, 4> {
        public:
            static std::array<Real, 33> const & abscissa_x()
            {
                static constexpr std::array<Real, 33> data = {\
                    f128(0.0), \
                    f128(0.35856858280031809199064515390793749545406372969943), \
                    f128(-0.35856858280031809199064515390793749545406372969943), \
                    f128(0.0),\
                    f128(0.0),\
                    f128(0.0),\
                    f128(0.0),\
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565),\
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565),\
                    f128(-0.68824720161168529772162873429362352512689535661565)
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_y()
            {
                static constexpr std::array<Real, 33> data = {\
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.35856858280031809199064515390793749545406372969943), \
                    f128(-0.35856858280031809199064515390793749545406372969943), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565),\
                    f128(-0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565),\
                    f128(-0.68824720161168529772162873429362352512689535661565)
                };
                return data;
            }

            static std::array<Real, 33> const & abscissa_z()
            {
                static constexpr std::array<Real, 33> data = {\
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.35856858280031809199064515390793749545406372969943), \
                    f128(-0.35856858280031809199064515390793749545406372969943), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.0), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.94868329805051379959966806332981556011586654179757), \
                    f128(-0.94868329805051379959966806332981556011586654179757), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565), \
                    f128(0.68824720161168529772162873429362352512689535661565), \
                    f128(-0.68824720161168529772162873429362352512689535661565)
                };
                return data;
            }

            static std::array<Real, 5> const & weights_integral()
            {
                static constexpr std::array<Real, 5> data = {\
                    f128(-0.55560636081898084641568866534572981760910430320581), \
                    f128(0.14936747447035512879134278311233043743331809175431), \
                    f128(0.031499263323680333282528069908042473200223543159071), \
                    f128(0.010161052685058172026621958034852410709749530051313), \
                    f128(0.043559162729258749102712044987129047513008117675781)
                };
                return data;
            }

            static std::array<Real, 4> const & weights_error()
            {
                static constexpr std::array<Real, 4> data = {\
                    f128(-2.2921810699588477366255144032921810699588477366255), \
                    f128(0.50411522633744855967078189300411522633744855967078), \
                    f128(-0.024005486968449931412894375857338820301783264746228), \
                    f128(0.034293552812071330589849108367626886145404663923182)
                };
                return data;
            }

    };
        



// The main integration algorithm

    template <class Real>
    class GM3D : public GM3D_detail<Real, GM::genz_malik_category<Real>::value > 
    {

        typedef GM3D_detail<Real, GM::genz_malik_category<Real>::value > base;
        static constexpr unsigned int my_num_threads{4};
        // static const RandomAccessContainer& abscissa();
        // static const RandomAccessContainer& weights();
    
        static constexpr Real ratio {216.09};
        
        template <typename F>
        static auto eval_cube(F f, CUBE::Cube<Real, 3>& cube){

            typedef decltype( std::declval<F>()(std::declval<Real>(), std::declval<Real>(), std::declval<Real>()) ) Return_type;
            typedef std::pair<CUBE::Cube<Real, 3>,  Return_type> Cube_Pair_t;
            std::array<Return_type, 33> vals_abscissas; 
            vals_abscissas.fill(0.0);

            const CUBE::Cube<Real, 3>& const_cube = cube;

            

            for (int i=0; i<33; i++){
                // base::abscissa()[i]
                Real cur_x = base::abscissa_x()[i] * const_cube.cube_size[0] * 0.5 + const_cube.cube_center[0];
                Real cur_y = base::abscissa_y()[i] * const_cube.cube_size[1] * 0.5 + const_cube.cube_center[1];
                Real cur_z = base::abscissa_z()[i] * const_cube.cube_size[2] * 0.5 + const_cube.cube_center[2];
                vals_abscissas[i] = f(cur_x, cur_y, cur_z);
            }
            

            auto slope_dim_0 = abs((vals_abscissas[1]+vals_abscissas[2]-2.0*vals_abscissas[0])-\
                ratio*(vals_abscissas[7]+vals_abscissas[8]-2.0*vals_abscissas[0]));
            auto slope_dim_1 = abs((vals_abscissas[3]+vals_abscissas[4]-2.0*vals_abscissas[0])-\
                ratio*(vals_abscissas[9]+vals_abscissas[10]-2.0*vals_abscissas[0]));
            auto slope_dim_2 = abs((vals_abscissas[5]+vals_abscissas[6]-2.0*vals_abscissas[0])-\
                ratio*(vals_abscissas[11]+vals_abscissas[12]-2.0*vals_abscissas[0]));

            cube.split_direction = 0; 
            if (slope_dim_0 < slope_dim_1) {
                cube.split_direction = 1;
                if (slope_dim_1 < slope_dim_2) {
                    cube.split_direction = 2;
                }
            } else {
                if (slope_dim_0 < slope_dim_2) {
                    cube.split_direction = 2;
                }
            }

            std::array<Return_type, 5> val5 {vals_abscissas[0], 0.0, 0.0, 0.0, 0.0};
            for (int i=0; i<6; i++){
                val5[1] += vals_abscissas[i+1];
                val5[2] += vals_abscissas[i+7];
            }

            for (int i=0; i<12; i++) val5[3] += vals_abscissas[i+13];
            for (int i=0; i<8; i++) val5[4] += vals_abscissas[i+25];

            Return_type esti_4th{ 0.0 }, esti_integral{0.0};

            for (int i=0; i<4; i++){
                esti_integral += val5[i] * base::weights_integral()[i];
                esti_4th += val5[i] * base::weights_error()[i];
            }
            esti_integral += val5[4] * base::weights_integral()[4];
            cube.esti_error = abs(esti_integral - esti_4th);
            // Normalization;
            esti_integral *= cube.cube_size[0] * cube.cube_size[1] * cube.cube_size[2];
            cube.esti_error *= cube.cube_size[0] * cube.cube_size[1] * cube.cube_size[2];
            cube.evaluated = true;

            Cube_Pair_t cube_pair(cube, esti_integral);
            return cube_pair;


        }

    public:
        GM3D(){};
        ~GM3D(){};

        template <class F>
        static auto integrate(F f, CUBE::Cube<Real, 3>& cube, const double& request_rel_error,  Real& esti_error, 
            const unsigned int& max_num_f_eval, unsigned int& num_f_eval)->decltype(std::declval<F>()(std::declval<Real>(), std::declval<Real>(), std::declval<Real>())){
                
                typedef decltype( std::declval<F>()(std::declval<Real>(), std::declval<Real>(), std::declval<Real>()) ) Return_type;
                typedef std::pair<CUBE::Cube<Real, 3>,  Return_type> Cube_Pair_t;
                std::vector< Cube_Pair_t > cubes_vec;

                // std::pair<CUBE::Cube<Real, 3>,  Return_type> cube_pair(cube, Return_type(0.0));

                num_f_eval = 0;
                unsigned int max_num_cubes = max_num_f_eval / 33 + 1;
                cubes_vec.reserve(max_num_cubes);
            
                Cube_Pair_t cube_pair = eval_cube<F>(f, cube);
                num_f_eval += 33;
                cubes_vec.push_back( cube_pair );

                Return_type esti_integral{ 0.0 };

                while (num_f_eval < max_num_f_eval)
                {   
                    esti_integral = Return_type( 0.0 );
                    esti_error = Real( 0.0 );
                    esti_integral = std::accumulate(cubes_vec.begin(), cubes_vec.end(), Return_type(0.0), \
                        [](Return_type i, const Cube_Pair_t& cur_cube_pair){return i+cur_cube_pair.second;});
                    esti_error = std::accumulate(cubes_vec.begin(), cubes_vec.end(), Real(0.0), \
                        [](Real i, const Cube_Pair_t& cur_cube_pair){return i + abs(cur_cube_pair.first.esti_error);});

                    if (abs(esti_error / esti_integral) < request_rel_error){
                        break;
                    }
                

                    int cur_number_threads = std::min(int(my_num_threads), int(cubes_vec.size()));

                    std::vector< Cube_Pair_t > threads_cubes_vec;
                    std::vector< Cube_Pair_t > threads_cubes_return_vec;
                    for (int i=0; i<cur_number_threads;i++){
                        threads_cubes_vec.push_back( cubes_vec.at(cubes_vec.size() - 1) );
                        cubes_vec.pop_back();
                    }


                // Logic not clear
                #pragma omp parallel num_threads(cur_number_threads)
                {
                   #pragma omp for
                    for (int i=0; i<cur_number_threads; i++)
                    {
                        auto cur_cubes = CUBE::split_cube( threads_cubes_vec[i].first );
                        std::vector<Cube_Pair_t> cur_cube_pairs;
                        for (int j=0; j<cur_cubes.size(); j++ ){

                            Cube_Pair_t cur_cube_pair = eval_cube<F>(f, cur_cubes[j]);
                            cur_cube_pairs.push_back(cur_cube_pair);
                        }
                        #pragma omp critical
                        {
                            for (int j=0; j<2; j++) threads_cubes_return_vec.push_back(cur_cube_pairs[j]);
                        }
                    }
                }
                for (int i=0; i<threads_cubes_return_vec.size(); i++){
                    cubes_vec.push_back(threads_cubes_return_vec[i]);
                }
                num_f_eval += 66 * cur_number_threads;

                std::sort(cubes_vec.begin(), cubes_vec.end(), [](const Cube_Pair_t& lhs, const Cube_Pair_t& rhs){
                    return (abs(lhs.first.esti_error) < abs(rhs.first.esti_error)); });                    
            }
            
            return esti_integral;
            }

    };

}