#pragma once
#include <cmath>
#include <numeric>
#include <utility>
#include <iostream>
#include <algorithm>
#include <vector>
#include <type_traits>
// #include <Eigen/Core>
// #include <boost/multiprecision/eigen.hpp>
#include "Cube.hpp"
#include "GM_category.hpp"
// #include <boost/multiprecision/float128.hpp>
// #include <boost/multiprecision/complex128.hpp>


namespace GM{

    template <class Real, unsigned tag>
    class GM2D_detail;

    template <class Real>
    class GM2D_detail <Real, 0> {
        public:

        static std::array<Real, 17> const & abscissa_x(){
            static constexpr std::array<Real, 17> data = {
                0.0f, \
                0.35856858280031809199064515390793749545406372969943f, \
                -0.35856858280031809199064515390793749545406372969943f, \
                0.0f,\
                0.0f,\
                0.94868329805051379959966806332981556011586654179757f, \
                -0.94868329805051379959966806332981556011586654179757f, \
                0.0f, \
                0.0f, \
                0.94868329805051379959966806332981556011586654179757f, \
                -0.94868329805051379959966806332981556011586654179757f, \
                -0.94868329805051379959966806332981556011586654179757f, \
                0.94868329805051379959966806332981556011586654179757f, \
                0.68824720161168529772162873429362352512689535661565f, \
                -0.68824720161168529772162873429362352512689535661565f, \
                -0.68824720161168529772162873429362352512689535661565f,\
                0.68824720161168529772162873429362352512689535661565f
            };
            return data;
        }

        static std::array<Real, 17> const & abscissa_y(){
            static constexpr std::array<Real, 17> data = {
                0.0f, \
                0.0f,\
                0.0f,\
                0.35856858280031809199064515390793749545406372969943f, \
                -0.35856858280031809199064515390793749545406372969943f, \
                0.0f, \
                0.0f, \
                0.94868329805051379959966806332981556011586654179757f, \
                -0.94868329805051379959966806332981556011586654179757f, \
                0.94868329805051379959966806332981556011586654179757f, \
                0.94868329805051379959966806332981556011586654179757f, \
                -0.94868329805051379959966806332981556011586654179757f, \
                -0.94868329805051379959966806332981556011586654179757f, \
                0.68824720161168529772162873429362352512689535661565f, \
                0.68824720161168529772162873429362352512689535661565f, \
                -0.68824720161168529772162873429362352512689535661565f,\
                -0.68824720161168529772162873429362352512689535661565f
            };
            return data;
        }

        static std::array<Real, 5> const & weights_integral()
        {
            static constexpr std::array<Real, 5> data = {\
                -0.19387288523090992226794695930498399634202103337906f, \
                0.14936747447035512879134278311233043743331809175431f, \
                0.051821368693796677335771985977747294619722603261698f, \
                0.010161052685058172026621958034852410709749530051313f, \
                0.087118325458517502413250012701315856322715033277448f
            };
            return data;
        }

        static std::array<Real, 4> const & weights_error()
        {
            static constexpr std::array<Real, 4> data = {\
                -1.3319615912208504801097393689986282578875171467764f, \
                0.50411522633744855967078189300411522633744855967078f, \
                0.044581618655692729766803840877914951989026063100137f, \
                0.034293552812071330589849108367626886145404663923182f
            };
            return data;
        }
    };

    template <class Real>
    class GM2D_detail <Real, 1> {

        // 1 for double
        public:

        static std::array<Real, 17> const & abscissa_x(){
            static constexpr std::array<Real, 17> data = {
                0.0, \
                0.35856858280031809199064515390793749545406372969943, \
                -0.35856858280031809199064515390793749545406372969943, \
                0.0,\
                0.0,\
                0.94868329805051379959966806332981556011586654179757, \
                -0.94868329805051379959966806332981556011586654179757, \
                0.0, \
                0.0, \
                0.94868329805051379959966806332981556011586654179757, \
                -0.94868329805051379959966806332981556011586654179757, \
                -0.94868329805051379959966806332981556011586654179757, \
                0.94868329805051379959966806332981556011586654179757, \
                0.68824720161168529772162873429362352512689535661565, \
                -0.68824720161168529772162873429362352512689535661565, \
                -0.68824720161168529772162873429362352512689535661565,\
                0.68824720161168529772162873429362352512689535661565
            };
            return data;
        }

        static std::array<Real, 17> const & abscissa_y(){
            static constexpr std::array<Real, 17> data = {
                0.0, \
                0.0,\
                0.0,\
                0.35856858280031809199064515390793749545406372969943, \
                -0.35856858280031809199064515390793749545406372969943, \
                0.0, \
                0.0, \
                0.94868329805051379959966806332981556011586654179757, \
                -0.94868329805051379959966806332981556011586654179757, \
                0.94868329805051379959966806332981556011586654179757, \
                0.94868329805051379959966806332981556011586654179757, \
                -0.94868329805051379959966806332981556011586654179757, \
                -0.94868329805051379959966806332981556011586654179757, \
                0.68824720161168529772162873429362352512689535661565, \
                0.68824720161168529772162873429362352512689535661565, \
                -0.68824720161168529772162873429362352512689535661565,\
                -0.68824720161168529772162873429362352512689535661565
            };
            return data;
        }

        static std::array<Real, 5> const & weights_integral()
        {
            static constexpr std::array<Real, 5> data = {\
                -0.19387288523090992226794695930498399634202103337906, \
                0.14936747447035512879134278311233043743331809175431, \
                0.051821368693796677335771985977747294619722603261698, \
                0.010161052685058172026621958034852410709749530051313, \
                0.087118325458517502413250012701315856322715033277448
            };
            return data;
        }

        static std::array<Real, 4> const & weights_error()
        {
            static constexpr std::array<Real, 4> data = {\
                -1.3319615912208504801097393689986282578875171467764, \
                0.50411522633744855967078189300411522633744855967078, \
                0.044581618655692729766803840877914951989026063100137, \
                0.034293552812071330589849108367626886145404663923182
            };
            return data;
        }
    };

    template <class Real>
    class GM2D_detail <Real, 2> {
        // 2 for long double

        public:

        static std::array<Real, 17> const & abscissa_x(){
            static constexpr std::array<Real, 17> data = {
                0.0L, \
                0.35856858280031809199064515390793749545406372969943L, \
                -0.35856858280031809199064515390793749545406372969943L, \
                0.0L,\
                0.0L,\
                0.94868329805051379959966806332981556011586654179757L, \
                -0.94868329805051379959966806332981556011586654179757L, \
                0.0L, \
                0.0L, \
                0.94868329805051379959966806332981556011586654179757L, \
                -0.94868329805051379959966806332981556011586654179757L, \
                -0.94868329805051379959966806332981556011586654179757L, \
                0.94868329805051379959966806332981556011586654179757L, \
                0.68824720161168529772162873429362352512689535661565L, \
                -0.68824720161168529772162873429362352512689535661565L, \
                -0.68824720161168529772162873429362352512689535661565L,\
                0.68824720161168529772162873429362352512689535661565L
            };
            return data;
        }

        static std::array<Real, 17> const & abscissa_y(){
            static constexpr std::array<Real, 17> data = {
                0.0L, \
                0.0L,\
                0.0L,\
                0.35856858280031809199064515390793749545406372969943L, \
                -0.35856858280031809199064515390793749545406372969943L, \
                0.0L, \
                0.0L, \
                0.94868329805051379959966806332981556011586654179757L, \
                -0.94868329805051379959966806332981556011586654179757L, \
                0.94868329805051379959966806332981556011586654179757L, \
                0.94868329805051379959966806332981556011586654179757L, \
                -0.94868329805051379959966806332981556011586654179757L, \
                -0.94868329805051379959966806332981556011586654179757L, \
                0.68824720161168529772162873429362352512689535661565L, \
                0.68824720161168529772162873429362352512689535661565L, \
                -0.68824720161168529772162873429362352512689535661565L,\
                -0.68824720161168529772162873429362352512689535661565L
            };
            return data;
        }

        static std::array<Real, 5> const & weights_integral()
        {
            static constexpr std::array<Real, 5> data = {\
                -0.19387288523090992226794695930498399634202103337906L, \
                0.14936747447035512879134278311233043743331809175431L, \
                0.051821368693796677335771985977747294619722603261698L, \
                0.010161052685058172026621958034852410709749530051313L, \
                0.087118325458517502413250012701315856322715033277448L
            };
            return data;
        }

        static std::array<Real, 4> const & weights_error()
        {
            static constexpr std::array<Real, 4> data = {\
                -1.3319615912208504801097393689986282578875171467764L, \
                0.50411522633744855967078189300411522633744855967078L, \
                0.044581618655692729766803840877914951989026063100137L, \
                0.034293552812071330589849108367626886145404663923182L
            };
            return data;
        }
    };

    #ifdef BOOST_HAS_FLOAT128
    template <class Real>
    class GM2D_detail <Real, 3> {
        public:

        static std::array<Real, 17> const & abscissa_x(){
            static constexpr std::array<Real, 17> data = {
                0.0Q, \
                0.35856858280031809199064515390793749545406372969943Q, \
                -0.35856858280031809199064515390793749545406372969943Q, \
                0.0Q,\
                0.0Q,\
                0.94868329805051379959966806332981556011586654179757Q, \
                -0.94868329805051379959966806332981556011586654179757Q, \
                0.0Q, \
                0.0Q, \
                0.94868329805051379959966806332981556011586654179757Q, \
                -0.94868329805051379959966806332981556011586654179757Q, \
                -0.94868329805051379959966806332981556011586654179757Q, \
                0.94868329805051379959966806332981556011586654179757Q, \
                0.68824720161168529772162873429362352512689535661565Q, \
                -0.68824720161168529772162873429362352512689535661565Q, \
                -0.68824720161168529772162873429362352512689535661565Q,\
                0.68824720161168529772162873429362352512689535661565Q
            };
            return data;
        }

        static std::array<Real, 17> const & abscissa_y(){
            static constexpr std::array<Real, 17> data = {\
                0.0Q, \
                0.0Q,\
                0.0Q,\
                0.35856858280031809199064515390793749545406372969943Q, \
                -0.35856858280031809199064515390793749545406372969943Q, \
                0.0Q, \
                0.0Q, \
                0.94868329805051379959966806332981556011586654179757Q, \
                -0.94868329805051379959966806332981556011586654179757Q, \
                0.94868329805051379959966806332981556011586654179757Q, \
                0.94868329805051379959966806332981556011586654179757Q, \
                -0.94868329805051379959966806332981556011586654179757Q, \
                -0.94868329805051379959966806332981556011586654179757Q, \
                0.68824720161168529772162873429362352512689535661565Q, \
                0.68824720161168529772162873429362352512689535661565Q, \
                -0.68824720161168529772162873429362352512689535661565Q,\
                -0.68824720161168529772162873429362352512689535661565Q
            };
            return data;
        }

        static std::array<Real, 5> const & weights_integral()
        {
            static constexpr std::array<Real, 5> data = {\
                -0.19387288523090992226794695930498399634202103337906Q, \
                0.14936747447035512879134278311233043743331809175431Q, \
                0.051821368693796677335771985977747294619722603261698Q, \
                0.010161052685058172026621958034852410709749530051313Q, \
                0.087118325458517502413250012701315856322715033277448Q
            };
            return data;
        }

        static std::array<Real, 4> const & weights_error()
        {
            static constexpr std::array<Real, 4> data = {\
                -1.3319615912208504801097393689986282578875171467764Q, \
                0.50411522633744855967078189300411522633744855967078Q, \
                0.044581618655692729766803840877914951989026063100137Q, \
                0.034293552812071330589849108367626886145404663923182Q
            };
            return data;
        }
    };
    #endif

    // typedef boost::multiprecision::float128 f128;

    // template <class Real>
    // class GM2D_detail <Real, 4> {
    //     public:

    //     static std::array<Real, 17> const & abscissa_x(){
    //         static constexpr std::array<Real, 17> data = {\
    //             f128(0.0), \
    //             f128(0.35856858280031809199064515390793749545406372969943), \
    //             f128(-0.35856858280031809199064515390793749545406372969943), \
    //             f128(0.0),\
    //             f128(0.0),\
    //             f128(0.94868329805051379959966806332981556011586654179757), \
    //             f128(-0.94868329805051379959966806332981556011586654179757), \
    //             f128(0.0), \
    //             f128(0.0), \
    //             f128(0.94868329805051379959966806332981556011586654179757), \
    //             f128(-0.94868329805051379959966806332981556011586654179757), \
    //             f128(-0.94868329805051379959966806332981556011586654179757), \
    //             f128(0.94868329805051379959966806332981556011586654179757), \
    //             f128(0.68824720161168529772162873429362352512689535661565), \
    //             f128(-0.68824720161168529772162873429362352512689535661565), \
    //             f128(-0.68824720161168529772162873429362352512689535661565),\
    //             f128(0.68824720161168529772162873429362352512689535661565)
    //         };
    //         return data;
    //     }

        // static std::array<Real, 17> const & abscissa_y(){
        //     static constexpr std::array<Real, 17> data = {
        //         f128(0.0), \
        //         f128(0.0),\
        //         f128(0.0),\
        //         f128(0.35856858280031809199064515390793749545406372969943), \
        //         f128(-0.35856858280031809199064515390793749545406372969943), \
        //         f128(0.0), \
        //         f128(0.0), \
        //         f128(0.94868329805051379959966806332981556011586654179757), \
        //         f128(-0.94868329805051379959966806332981556011586654179757), \
        //         f128(0.94868329805051379959966806332981556011586654179757), \
        //         f128(0.94868329805051379959966806332981556011586654179757), \
        //         f128(-0.94868329805051379959966806332981556011586654179757), \
        //         f128(-0.94868329805051379959966806332981556011586654179757), \
        //         f128(0.68824720161168529772162873429362352512689535661565), \
        //         f128(0.68824720161168529772162873429362352512689535661565), \
        //         f128(-0.68824720161168529772162873429362352512689535661565),\
        //         f128(-0.68824720161168529772162873429362352512689535661565)
        //     };
        //     return data;
        // }

        // static std::array<Real, 5> const & weights_integral()
        // {
        //     static constexpr std::array<Real, 5> data = {\
        //         f128(-0.19387288523090992226794695930498399634202103337906), \
        //         f128(0.14936747447035512879134278311233043743331809175431), \
        //         f128(0.051821368693796677335771985977747294619722603261698), \
        //         f128(0.010161052685058172026621958034852410709749530051313), \
        //         f128(0.087118325458517502413250012701315856322715033277448)
        //     };
        //     return data;
        // }

        // static std::array<Real, 4> const & weights_error()
        // {
        //     static constexpr std::array<Real, 4> data = {\
        //         f128(-1.3319615912208504801097393689986282578875171467764), \
        //         f128(0.50411522633744855967078189300411522633744855967078), \
        //         f128(0.044581618655692729766803840877914951989026063100137), \
        //         f128(0.034293552812071330589849108367626886145404663923182)
        //     };
        //     return data;
        // }
    // };


    //

    template <class Real>
    class GM2D : public GM2D_detail<Real, GM::genz_malik_category<Real>::value > {
    private:
        typedef GM2D_detail<Real, GM::genz_malik_category<Real>::value > base;

        static constexpr Real ratio {216.09}; // 

        template <class F>
        static auto eval_cube(F f, CUBE::Cube<Real, 2>& cube)
        {
            typedef decltype( std::declval<F>()(std::declval<Real>(), std::declval<Real>()) ) Return_type;
            typedef std::pair<CUBE::Cube<Real, 2>,  Return_type> Cube_Pair_t;
            const CUBE::Cube<Real, 2>& const_cube = cube;
            std::array<Return_type, 17> vals_abscissas; 
            vals_abscissas.fill(0.0);

            for (int i=0; i<17; i++){
                Real cur_x = base::abscissa_x()[i] * const_cube.cube_size[0] * 0.5 + const_cube.cube_center[0];
                Real cur_y = base::abscissa_y()[i] * const_cube.cube_size[1] * 0.5 + const_cube.cube_center[1];
                vals_abscissas[i] = f(cur_x, cur_y);
            }


            auto slope_dim_0 = std::abs((vals_abscissas[1] + vals_abscissas[2]-2.0 * vals_abscissas[0]) -\
                ratio * (vals_abscissas[5] + vals_abscissas[6] - 2.0 * vals_abscissas[0]));
            auto slope_dim_1 = std::abs((vals_abscissas[3] + vals_abscissas[4]-2.0 * vals_abscissas[0]) -\
                ratio * (vals_abscissas[7] + vals_abscissas[8] - 2.0 * vals_abscissas[0]));

            cube.split_direction = (slope_dim_0 > slope_dim_1) ? 0 : 1;

            std::array<Return_type, 5> val5 {vals_abscissas[0], 0.0, 0.0, 0.0, 0.0};
            for (int i=1; i<val5.size(); i++){
                val5[1] += vals_abscissas[i];
                val5[2] += vals_abscissas[i+4];
                val5[3] += vals_abscissas[i+8];
                val5[4] += vals_abscissas[i+12];
            }

            Return_type esti_4th{ 0.0 }, esti_integral {0.0};

            for (int i=0; i<4; i++){
                esti_integral += val5[i] * base::weights_integral()[i];
                esti_4th += val5[i] *  base::weights_error()[i];
            }
            esti_integral += val5[4] * base::weights_integral()[4];
            cube.esti_error = std::abs(esti_integral - esti_4th);
            // Normalization;
            esti_integral *= cube.cube_size[0] * cube.cube_size[1];
            cube.esti_error *= cube.cube_size[0] * cube.cube_size[1];
            cube.evaluated = true;


            Cube_Pair_t cube_pair(cube, esti_integral);
            return cube_pair;
        }

    public:
        GM2D(){};
        ~GM2D(){};

        template <typename F>
        static auto integrate(F f, CUBE::Cube<Real,  2>& cube, const double& request_rel_error, Real& esti_error, 
            const unsigned int& max_num_f_eval, unsigned int& num_f_eval){


            typedef decltype( std::declval<F>()(std::declval<Real>(), std::declval<Real>()) ) Return_type;
            typedef std::pair<CUBE::Cube<Real, 2>,  Return_type> Cube_Pair_t;
            std::vector< Cube_Pair_t > cubes_pair_vec;  
            num_f_eval = 0;

            // std::vector<CUBE::Cube<Real,  2> > cubes_vec;
            int max_num_cubes = max_num_f_eval / 17 + 1;
            cubes_pair_vec.reserve(max_num_cubes);
            
            Cube_Pair_t cube_pair = eval_cube<F>(f, cube);
            num_f_eval += 17;
            cubes_pair_vec.emplace_back(cube_pair);
            Return_type esti_integral{ 0.0 };
            while (num_f_eval < max_num_f_eval)
            {   
                esti_integral = Return_type( 0.0 );
                esti_error = Real( 0.0 );
                esti_integral = std::accumulate(cubes_pair_vec.begin(), cubes_pair_vec.end(), Return_type(0.0), \
                    [](Return_type i, const Cube_Pair_t& cur_cube_pair){return i+cur_cube_pair.second;});
                esti_error = std::accumulate(cubes_pair_vec.begin(), cubes_pair_vec.end(), Real(0.0), \
                    [](Real i, const Cube_Pair_t& cur_cube_pair){
                        return i + std::abs(cur_cube_pair.first.esti_error);
                        });

                Cube_Pair_t cur_cube_pair = cubes_pair_vec.at(cubes_pair_vec.size() - 1);


                if (num_f_eval > 500){
                    if (std::abs(esti_error /esti_integral) < request_rel_error){
                        break;
                    }
                }
                

                cubes_pair_vec.pop_back();
                auto cur_cubes = CUBE::split_cube(cur_cube_pair.first);

                for (int i=0; i<cur_cubes.size(); i++ ){
                    Cube_Pair_t just_cube_pair = eval_cube<F>(f, cur_cubes[i]);
                    // just_cube_pair.first.esti_error += 0.05 * cur_cube_pair.first.esti_error;
                    num_f_eval += 17;

                    cubes_pair_vec.emplace_back(just_cube_pair);
                }

                std::sort(cubes_pair_vec.begin(), cubes_pair_vec.end(), [](const Cube_Pair_t& lhs, const Cube_Pair_t& rhs){
                    return (std::abs(lhs.first.esti_error) < std::abs(rhs.first.esti_error)); });

            }
            return esti_integral;
        }


    };


};



